!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<SID>xx	cctree.vim	/^map <SID>xx <SID>xx$/;"	m
Background	appearance/dracula.vim	/^function! s:Background()$/;"	f
BuildProj	functions/buildFunction.vim	/^function! BuildProj() abort$/;"	f
CCTreeAppendDB	cctree.vim	/^command! -nargs=? -complete=file CCTreeAppendDB  call s:CCTreeCmdLine.mMergeDB(<q-args>, s:DBClasses.cscopeid)$/;"	c
CCTreeBufferKeyMappingsCreate	cctree.vim	/^function! s:CCTreeBufferKeyMappingsCreate(kmaps)$/;"	f
CCTreeCmdLine.mInputDBName	cctree.vim	/^function! s:CCTreeCmdLine.mInputDBName(action, dbName, class) dict$/;"	f
CCTreeCmdLine.mLoadDB	cctree.vim	/^function! s:CCTreeCmdLine.mLoadDB(db_name, class) dict$/;"	f
CCTreeCmdLine.mLoadDBFromDisk	cctree.vim	/^function! s:CCTreeCmdLine.mLoadDBFromDisk(dbName) dict$/;"	f
CCTreeCmdLine.mMergeDB	cctree.vim	/^function! s:CCTreeCmdLine.mMergeDB(db_name, class) dict$/;"	f
CCTreeCmdLine.mSaveDB	cctree.vim	/^function! s:CCTreeCmdLine.mSaveDB(dbName, class) dict$/;"	f
CCTreeCompleteKwd	cctree.vim	/^function! s:CCTreeCompleteKwd(arglead, cmdline, cursorpos)$/;"	f
CCTreeCreateGenericMaps	cctree.vim	/^function! s:CCTreeCreateGenericMaps(maptype, mapkind, dichar1, dichar2)$/;"	f
CCTreeCscopeDb	cctree.vim	/^    let CCTreeCscopeDb = "cscope.out"$/;"	v
CCTreeDBList.mAddDbToList	cctree.vim	/^function! s:CCTreeDBList.mAddDbToList(dbName, type)$/;"	f
CCTreeDBList.mAddNew	cctree.vim	/^function! s:CCTreeDBList.mAddNew(dbName, xRefDb, dbclass, storageclass)$/;"	f
CCTreeDBList.mClearAll	cctree.vim	/^function! s:CCTreeDBList.mClearAll() dict$/;"	f
CCTreeDBList.mCreate	cctree.vim	/^function! s:CCTreeDBList.mCreate() dict$/;"	f
CCTreeDBList.mCreateDbLoaderAndReader	cctree.vim	/^function! s:CCTreeDBList.mCreateDbLoaderAndReader(dbName, dbclass, storageclass) dict$/;"	f
CCTreeDBList.mIsEmpty	cctree.vim	/^function! s:CCTreeDBList.mIsEmpty() dict$/;"	f
CCTreeDBList.mLoadDB	cctree.vim	/^function! s:CCTreeDBList.mLoadDB(gDbLdr, xRefDb, gRdr)$/;"	f
CCTreeDBList.mMerge	cctree.vim	/^function! s:CCTreeDBList.mMerge(dbName, xRefDb, class)$/;"	f
CCTreeDBList.mShowLoaded	cctree.vim	/^function! s:CCTreeDBList.mShowLoaded() dict$/;"	f
CCTreeDb	cctree.vim	/^    let CCTreeDb = "cctree.out"$/;"	v
CCTreeDbFileMaxSize	cctree.vim	/^    let CCTreeDbFileMaxSize = 40000000 "40 Mbytes$/;"	v
CCTreeDbFileSplitLines	cctree.vim	/^    let CCTreeDbFileSplitLines = -1$/;"	v
CCTreeDisplay.mPopulateTreeInCurrentBuffer	cctree.vim	/^function! s:CCTreeDisplay.mPopulateTreeInCurrentBuffer(dtree)$/;"	f
CCTreeDisplayMode	cctree.vim	/^    let CCTreeDisplayMode = 1$/;"	v
CCTreeEnhancedSymbolProcessing	cctree.vim	/^    let CCTreeEnhancedSymbolProcessing = 0$/;"	v
CCTreeFoldExpr	cctree.vim	/^function! CCTreeFoldExpr(line)$/;"	f
CCTreeFoldText	cctree.vim	/^function! CCTreeFoldText()$/;"	f
CCTreeGetCscopeMaps	cctree.vim	/^function! s:CCTreeGetCscopeMaps(maptype, mapkind)$/;"	f
CCTreeGetXRefDbMaps	cctree.vim	/^function! s:CCTreeGetXRefDbMaps(maptype, mapkind)$/;"	f
CCTreeGlobals.mCursorHoldHandleEvent	cctree.vim	/^function! s:CCTreeGlobals.mCursorHoldHandleEvent() dict$/;"	f
CCTreeGlobals.mDisable	cctree.vim	/^function! s:CCTreeGlobals.mDisable(opt) dict$/;"	f
CCTreeGlobals.mDisplayToggle	cctree.vim	/^function! s:CCTreeGlobals.mDisplayToggle() dict$/;"	f
CCTreeGlobals.mEnable	cctree.vim	/^function! s:CCTreeGlobals.mEnable(opt) dict$/;"	f
CCTreeGlobals.mEncodingChangedHandleEvent	cctree.vim	/^function! s:CCTreeGlobals.mEncodingChangedHandleEvent() dict$/;"	f
CCTreeGlobals.mGetCallsForSymbol	cctree.vim	/^function! s:CCTreeGlobals.mGetCallsForSymbol(name, depth, direction) dict$/;"	f
CCTreeGlobals.mGetCallsForTreeNode	cctree.vim	/^function! s:CCTreeGlobals.mGetCallsForTreeNode(rtree, action, depth, direction) dict$/;"	f
CCTreeGlobals.mGetPreviewTreeSymbols	cctree.vim	/^function! s:CCTreeGlobals.mGetPreviewTreeSymbols()$/;"	f
CCTreeGlobals.mGetSymNames	cctree.vim	/^function! s:CCTreeGlobals.mGetSymNames(lead) dict$/;"	f
CCTreeGlobals.mInit	cctree.vim	/^function! s:CCTreeGlobals.mInit() dict$/;"	f
CCTreeGlobals.mLoadBufferFromKeyword	cctree.vim	/^function! s:CCTreeGlobals.mLoadBufferFromKeyword()$/;"	f
CCTreeGlobals.mPreviewBufferFromKeyword	cctree.vim	/^function! s:CCTreeGlobals.mPreviewBufferFromKeyword()$/;"	f
CCTreeGlobals.mPreviewSave	cctree.vim	/^function! s:CCTreeGlobals.mPreviewSave() dict$/;"	f
CCTreeGlobals.mReadToXRefDb	cctree.vim	/^function! s:CCTreeGlobals.mReadToXRefDb(fname) dict$/;"	f
CCTreeGlobals.mRecursiveDepthDecrease	cctree.vim	/^function! s:CCTreeGlobals.mRecursiveDepthDecrease() dict$/;"	f
CCTreeGlobals.mRecursiveDepthIncrease	cctree.vim	/^function! s:CCTreeGlobals.mRecursiveDepthIncrease() dict$/;"	f
CCTreeGlobals.mRecursiveDepthModify	cctree.vim	/^function! s:CCTreeGlobals.mRecursiveDepthModify(action) dict$/;"	f
CCTreeGlobals.mSanitizeCallDepth	cctree.vim	/^function! s:CCTreeGlobals.mSanitizeCallDepth() dict$/;"	f
CCTreeGlobals.mSetPreviewState	cctree.vim	/^function! s:CCTreeGlobals.mSetPreviewState(name, depth, direction) dict$/;"	f
CCTreeGlobals.mSetupAutoCmds	cctree.vim	/^function! s:CCTreeGlobals.mSetupAutoCmds() dict$/;"	f
CCTreeGlobals.mSetupCursorMoveAutoCmd	cctree.vim	/^function! s:CCTreeGlobals.mSetupCursorMoveAutoCmd(enable) dict$/;"	f
CCTreeGlobals.mSetupEncodingChangeAutoCmd	cctree.vim	/^function! s:CCTreeGlobals.mSetupEncodingChangeAutoCmd(enable) dict$/;"	f
CCTreeGlobals.mShowLoadedDBs	cctree.vim	/^function! s:CCTreeGlobals.mShowLoadedDBs() dict$/;"	f
CCTreeGlobals.mToggle	cctree.vim	/^function! s:CCTreeGlobals.mToggle(opt) dict$/;"	f
CCTreeGlobals.mUnLoadDBs	cctree.vim	/^function! s:CCTreeGlobals.mUnLoadDBs() dict$/;"	f
CCTreeGlobals.mUpdateForCurrentSymbol	cctree.vim	/^function! s:CCTreeGlobals.mUpdateForCurrentSymbol() dict$/;"	f
CCTreeGlobals.mWriteXRefDbToFile	cctree.vim	/^function! s:CCTreeGlobals.mWriteXRefDbToFile(fname) dict$/;"	f
CCTreeHilightCallTree	cctree.vim	/^    let CCTreeHilightCallTree = 1$/;"	v
CCTreeJoinProg	cctree.vim	/^    let CCTreeJoinProg = 'cat'$/;"	v
CCTreeJoinProgCmd	cctree.vim	/^    let CCTreeJoinProgCmd = 'PROG_JOIN JOIN_OPT IN_FILES > OUT_FILE'$/;"	v
CCTreeJoinProgOpts	cctree.vim	/^    let CCTreeJoinProgOpts = ""$/;"	v
CCTreeLoadBufferUsingTag	cctree.vim	/^command! -nargs=0 CCTreeLoadBufferUsingTag call s:CCTreeGlobals.mLoadBufferFromKeyword()$/;"	c
CCTreeLoadDB	cctree.vim	/^command! -nargs=? -complete=file CCTreeLoadDB  call s:CCTreeCmdLine.mLoadDB(<q-args>, s:DBClasses.cscopeid)$/;"	c
CCTreeLoadXRefDB	cctree.vim	/^command! -nargs=? -complete=file CCTreeLoadXRefDB  call s:CCTreeCmdLine.mLoadDB(<q-args>, s:DBClasses.cctreexref)$/;"	c
CCTreeLoadXRefDBFromDisk	cctree.vim	/^command! -nargs=? -complete=file CCTreeLoadXRefDBFromDisk$/;"	c
CCTreeMakeCommaListUnique	cctree.vim	/^function! s:CCTreeMakeCommaListUnique(clist)$/;"	f
CCTreeMaps	cctree.vim	/^augroup CCTreeMaps$/;"	a
CCTreeMarkers.mCreate	cctree.vim	/^function! s:CCTreeMarkers.mCreate() dict$/;"	f
CCTreeMarkers.mGetArrow	cctree.vim	/^function! s:CCTreeMarkers.mGetArrow(direction) dict$/;"	f
CCTreeMinVisibleDepth	cctree.vim	/^    let CCTreeMinVisibleDepth = 3$/;"	v
CCTreeOptionsList	cctree.vim	/^function! s:CCTreeOptionsList(arglead, cmdline, cursorpos)$/;"	f
CCTreeOptsDisable	cctree.vim	/^command! -nargs=1 -complete=customlist,s:CCTreeOptionsList CCTreeOptsDisable call s:CCTreeGlobals.mDisable(<q-args>)$/;"	c
CCTreeOptsEnable	cctree.vim	/^command! -nargs=1 -complete=customlist,s:CCTreeOptionsList CCTreeOptsEnable call s:CCTreeGlobals.mEnable(<q-args>)$/;"	c
CCTreeOptsToggle	cctree.vim	/^command! -nargs=1 -complete=customlist,s:CCTreeOptionsList CCTreeOptsToggle call s:CCTreeGlobals.mToggle(<q-args>)$/;"	c
CCTreeOrientation	cctree.vim	/^    let CCTreeOrientation = "topleft"$/;"	v
CCTreePreviewBufferUsingTag	cctree.vim	/^command! -nargs=0 CCTreePreviewBufferUsingTag call s:CCTreeGlobals.mPreviewBufferFromKeyword()$/;"	c
CCTreePreviewState.mCreate	cctree.vim	/^function! s:CCTreePreviewState.mCreate()$/;"	f
CCTreePreviewState.mStore	cctree.vim	/^function! s:CCTreePreviewState.mStore(symbol, direction)$/;"	f
CCTreeRecurseDepthMinus	cctree.vim	/^command! -nargs=0 CCTreeRecurseDepthMinus call s:CCTreeGlobals.mRecursiveDepthDecrease()$/;"	c
CCTreeRecurseDepthPlus	cctree.vim	/^command! -nargs=0 CCTreeRecurseDepthPlus call s:CCTreeGlobals.mRecursiveDepthIncrease()$/;"	c
CCTreeRecursiveDepth	cctree.vim	/^    let CCTreeRecursiveDepth = 3$/;"	v
CCTreeSaveXRefDB	cctree.vim	/^command! -nargs=? -complete=file CCTreeSaveXRefDB  call s:CCTreeCmdLine.mSaveDB(<q-args>, s:DBClasses.cctreexref)$/;"	c
CCTreeSetEnhancedSymbolProcessing	cctree.vim	/^function! s:CCTreeSetEnhancedSymbolProcessing(val)$/;"	f
CCTreeSetUseCallTreeHiLights	cctree.vim	/^function! s:CCTreeSetUseCallTreeHiLights(val)$/;"	f
CCTreeSetUseConceal	cctree.vim	/^function! s:CCTreeSetUseConceal(val)$/;"	f
CCTreeSetUseUtf8Symbols	cctree.vim	/^function! s:CCTreeSetUseUtf8Symbols(val)$/;"	f
CCTreeShowLoadedDBs	cctree.vim	/^command! -nargs=0 CCTreeShowLoadedDBs          call s:CCTreeGlobals.mShowLoadedDBs()$/;"	c
CCTreeSplitProg	cctree.vim	/^    let CCTreeSplitProg = 'split'$/;"	v
CCTreeSplitProgCmd	cctree.vim	/^    let CCTreeSplitProgCmd = 'PROG_SPLIT SPLIT_OPT SPLIT_SIZE IN_FILE OUT_FILE_PREFIX'$/;"	v
CCTreeSplitProgOption	cctree.vim	/^    let CCTreeSplitProgOption = '-C'$/;"	v
CCTreeStatusLine	cctree.vim	/^function! CCTreeStatusLine()$/;"	f
CCTreeSym.mCreate	cctree.vim	/^function! s:CCTreeSym.mCreate(name, kind)$/;"	f
CCTreeTagDbRdr.mCreate	cctree.vim	/^function! s:CCTreeTagDbRdr.mCreate(fname) dict$/;"	f
CCTreeTagDbRdr.mDecodeTagLine	cctree.vim	/^function! s:CCTreeTagDbRdr.mDecodeTagLine(tagline) dict$/;"	f
CCTreeTagDbRdr.mGetPostProcessingMaps	cctree.vim	/^function! s:CCTreeTagDbRdr.mGetPostProcessingMaps() dict$/;"	f
CCTreeTagDbRdr.mGetPreProcessingMaps	cctree.vim	/^function! s:CCTreeTagDbRdr.mGetPreProcessingMaps() dict$/;"	f
CCTreeTagDbRdr.mParseDbHeader	cctree.vim	/^function! s:CCTreeTagDbRdr.mParseDbHeader(hdr) dict$/;"	f
CCTreeTagDbRdr.mProcessSymbol	cctree.vim	/^function! s:CCTreeTagDbRdr.mProcessSymbol(xrefdb, aline) dict$/;"	f
CCTreeTagDbRdr.mProcessingStateDone	cctree.vim	/^function! s:CCTreeTagDbRdr.mProcessingStateDone() dict$/;"	f
CCTreeTagDbRdr.mProcessingStateInit	cctree.vim	/^function! s:CCTreeTagDbRdr.mProcessingStateInit() dict$/;"	f
CCTreeTagDbRdr.mReadLinesFromFile	cctree.vim	/^function! s:CCTreeTagDbRdr.mReadLinesFromFile(vdbFile, filtercmds) dict$/;"	f
CCTreeTagDbRdr.mRequireCleanup	cctree.vim	/^function! s:CCTreeTagDbRdr.mRequireCleanup() dict$/;"	f
CCTreeTagDbRdr.mRequirePostProcessing	cctree.vim	/^function! s:CCTreeTagDbRdr.mRequirePostProcessing() dict$/;"	f
CCTreeTagDbRdr.mRequirePreProcessing	cctree.vim	/^function! s:CCTreeTagDbRdr.mRequirePreProcessing() dict$/;"	f
CCTreeTagDbWriter.mBuildHeader	cctree.vim	/^function! s:CCTreeTagDbWriter.mBuildHeader() dict$/;"	f
CCTreeTagDbWriter.mBuildTagLine	cctree.vim	/^function! s:CCTreeTagDbWriter.mBuildTagLine(sym, symid) dict$/;"	f
CCTreeTagDbWriter.mCreate	cctree.vim	/^function! s:CCTreeTagDbWriter.mCreate(tmaps) dict$/;"	f
CCTreeTagDbWriter.mDoneWriting	cctree.vim	/^function! s:CCTreeTagDbWriter.mDoneWriting() dict$/;"	f
CCTreeTagDbWriter.mInitWriting	cctree.vim	/^function! s:CCTreeTagDbWriter.mInitWriting() dict$/;"	f
CCTreeTraceForward	cctree.vim	/^        \\ CCTreeTraceForward call s:CCTreeTraceTreeForSymbol(<q-args>, 'c')$/;"	c
CCTreeTraceReverse	cctree.vim	/^command! -nargs=? -complete=customlist,s:CCTreeCompleteKwd CCTreeTraceReverse$/;"	c
CCTreeTraceTreeForSymbol	cctree.vim	/^function! s:CCTreeTraceTreeForSymbol(sym_arg, direction)$/;"	f
CCTreeUI.mInputDBName	cctree.vim	/^function! s:CCTreeUI.mInputDBName(dbName, class, action)$/;"	f
CCTreeUnLoadDB	cctree.vim	/^command! -nargs=0 CCTreeUnLoadDB               call s:CCTreeGlobals.mUnLoadDBs()$/;"	c
CCTreeUsePerl	cctree.vim	/^    let CCTreeUsePerl = 0$/;"	v
CCTreeUseUTF8Symbols	cctree.vim	/^    let CCTreeUseUTF8Symbols = 0$/;"	v
CCTreeUtils.mDetectDB	cctree.vim	/^function! s:CCTreeUtils.mDetectDB(class)$/;"	f
CCTreeUtils.mFilter	cctree.vim	/^function! s:CCTreeUtils.mFilter(lines, filtercmd) dict$/;"	f
CCTreeUtils.mInfoMsg	cctree.vim	/^function! s:CCTreeUtils.mInfoMsg(msg) dict$/;"	f
CCTreeUtils.mWarningMsg	cctree.vim	/^function! s:CCTreeUtils.mWarningMsg(msg) dict$/;"	f
CCTreeUtils.mWarningPrompt	cctree.vim	/^function! s:CCTreeUtils.mWarningPrompt(msg) dict$/;"	f
CCTreeUtils.mWrite	cctree.vim	/^function! s:CCTreeUtils.mWrite(msg) dict$/;"	f
CCTreeWindow.mBuildStatusLine	cctree.vim	/^function! s:CCTreeWindow.mBuildStatusLine(pState, title, items)$/;"	f
CCTreeWindow.mClearMarks	cctree.vim	/^function! s:CCTreeWindow.mClearMarks(dtree, lastLine, noskip) dict$/;"	f
CCTreeWindow.mClearMarksAll	cctree.vim	/^function! s:CCTreeWindow.mClearMarksAll(dtree) dict$/;"	f
CCTreeWindow.mClearMarksVisible	cctree.vim	/^function! s:CCTreeWindow.mClearMarksVisible(dtree) dict$/;"	f
CCTreeWindow.mClose	cctree.vim	/^function! s:CCTreeWindow.mClose() dict$/;"	f
CCTreeWindow.mCreate	cctree.vim	/^function! s:CCTreeWindow.mCreate() dict$/;"	f
CCTreeWindow.mDisplayToggle	cctree.vim	/^function! s:CCTreeWindow.mDisplayToggle() dict$/;"	f
CCTreeWindow.mDisplayTree	cctree.vim	/^function! s:CCTreeWindow.mDisplayTree(atree, direction) dict$/;"	f
CCTreeWindow.mEnter	cctree.vim	/^function! s:CCTreeWindow.mEnter() dict$/;"	f
CCTreeWindow.mExtractTreeSymbols	cctree.vim	/^function! s:CCTreeWindow.mExtractTreeSymbols(dtree)$/;"	f
CCTreeWindow.mGetKeywordAtCursor	cctree.vim	/^function! s:CCTreeWindow.mGetKeywordAtCursor() dict$/;"	f
CCTreeWindow.mInitSyntax	cctree.vim	/^function! s:CCTreeWindow.mInitSyntax(markers) dict$/;"	f
CCTreeWindow.mIsOpen	cctree.vim	/^function! s:CCTreeWindow.mIsOpen() dict$/;"	f
CCTreeWindow.mLeave	cctree.vim	/^function! s:CCTreeWindow.mLeave()$/;"	f
CCTreeWindow.mMarkCallTree	cctree.vim	/^function! s:CCTreeWindow.mMarkCallTree(dtree, keyword, firstLine) dict$/;"	f
CCTreeWindow.mMarkCallTreeAll	cctree.vim	/^function! s:CCTreeWindow.mMarkCallTreeAll(dtree, keyword) dict$/;"	f
CCTreeWindow.mMarkCallTreeVisible	cctree.vim	/^function! s:CCTreeWindow.mMarkCallTreeVisible(dtree, keyword) dict$/;"	f
CCTreeWindow.mPreviewSave	cctree.vim	/^function! s:CCTreeWindow.mPreviewSave(savetitle) dict$/;"	f
CCTreeWindow.mResize	cctree.vim	/^function! s:CCTreeWindow.mResize() dict$/;"	f
CCTreeWindowGetHiKeyword	cctree.vim	/^function! s:CCTreeWindowGetHiKeyword()$/;"	f
CCTreeWindowHeight	cctree.vim	/^    let CCTreeWindowHeight = -1$/;"	v
CCTreeWindowMinWidth	cctree.vim	/^    let CCTreeWindowMinWidth = 25$/;"	v
CCTreeWindowPreviewStatusLine	cctree.vim	/^function! CCTreeWindowPreviewStatusLine()$/;"	f
CCTreeWindowSaveCopy	cctree.vim	/^command! -nargs=0 CCTreeWindowSaveCopy call s:CCTreeGlobals.mPreviewSave()$/;"	c
CCTreeWindowToggle	cctree.vim	/^command! -nargs=0 CCTreeWindowToggle         call s:CCTreeGlobals.mDisplayToggle()$/;"	c
CCTreeWindowVertical	cctree.vim	/^    let CCTreeWindowVertical = 1$/;"	v
CCTreeWindowWidth	cctree.vim	/^    let CCTreeWindowWidth = -1$/;"	v
CCTreeXrefDbEntry.mCreate	cctree.vim	/^function! s:CCTreeXrefDbEntry.mCreate(fname, type) dict$/;"	f
CallTreeNode.mCreate	cctree.vim	/^function! s:CallTreeNode.mCreate(name, id) dict$/;"	f
CallTreeUtils.mAddChildLink	cctree.vim	/^function! s:CallTreeUtils.mAddChildLink(callTreeNode, childTree) dict$/;"	f
CharMaps.CrossProduct	cctree.vim	/^function! s:CharMaps.CrossProduct(seq1, seq2) dict$/;"	f
CharMaps.mDoneTranslator	cctree.vim	/^function! s:CharMaps.mDoneTranslator() dict$/;"	f
CharMaps.mInitTranslator	cctree.vim	/^function! s:CharMaps.mInitTranslator() dict$/;"	f
ClangFormat	functions/formatting.vim	/^com! ClangFormat call s:ClangFormat()$/;"	c
ClangFormat	functions/formatting.vim	/^function! s:ClangFormat() abort$/;"	f
CscopeDbRdr.mCreate	cctree.vim	/^function! s:CscopeDbRdr.mCreate(fname, enhanced) dict$/;"	f
CscopeDbRdr.mGetPostProcessingMaps	cctree.vim	/^function! s:CscopeDbRdr.mGetPostProcessingMaps() dict$/;"	f
CscopeDbRdr.mGetPreProcessingMaps	cctree.vim	/^function! s:CscopeDbRdr.mGetPreProcessingMaps() dict$/;"	f
CscopeDbRdr.mParseDbHeader	cctree.vim	/^function! s:CscopeDbRdr.mParseDbHeader(dbHeader) dict$/;"	f
CscopeDbRdr.mProcessSymbol	cctree.vim	/^function! s:CscopeDbRdr.mProcessSymbol(xrefdb, symbol) dict$/;"	f
CscopeDbRdr.mProcessTaggedSymbol	cctree.vim	/^function! s:CscopeDbRdr.mProcessTaggedSymbol(xrefdb, symbol) dict$/;"	f
CscopeDbRdr.mProcessUnTaggedSymbol	cctree.vim	/^function! s:CscopeDbRdr.mProcessUnTaggedSymbol(xrefdb, symbol) dict$/;"	f
CscopeDbRdr.mProcessingStateDone	cctree.vim	/^function! s:CscopeDbRdr.mProcessingStateDone() dict$/;"	f
CscopeDbRdr.mProcessingStateInit	cctree.vim	/^function! s:CscopeDbRdr.mProcessingStateInit() dict$/;"	f
CscopeDbRdr.mReadLinesFromFile	cctree.vim	/^function! s:CscopeDbRdr.mReadLinesFromFile(vDbFile, filtercmds) dict$/;"	f
CscopeDbRdr.mRequireCleanup	cctree.vim	/^function! s:CscopeDbRdr.mRequireCleanup() dict$/;"	f
CscopeDbRdr.mRequirePostProcessing	cctree.vim	/^function! s:CscopeDbRdr.mRequirePostProcessing() dict$/;"	f
CscopeDbRdr.mRequirePreProcessing	cctree.vim	/^function! s:CscopeDbRdr.mRequirePreProcessing() dict$/;"	f
CscopeDbRdrState.mCreate	cctree.vim	/^function! s:CscopeDbRdrState.mCreate() dict$/;"	f
Cvsdiff	functions/cvsHelper.vim	/^com! -bar -nargs=? Cvsdiff :call s:Cvsdiff(<f-args>)$/;"	c
Cvsdiff	functions/cvsHelper.vim	/^function! s:Cvsdiff(...) abort$/;"	f
DBGecho	cctree.vim	/^function! DBGecho(...)$/;"	f
DBGredir	cctree.vim	/^function! DBGredir(...)$/;"	f
DEV	functions/cscopeHelp.vim	/^augroup DEV$/;"	a
DEVTREE	functions/cscopeHelp.vim	/^augroup DEVTREE$/;"	a
DiffSaved	functions/cvsHelper.vim	/^com! DiffSaved call s:DiffWithSaved()$/;"	c
DiffWithSaved	functions/cvsHelper.vim	/^function! s:DiffWithSaved() abort$/;"	f
DisplayTree.mBuildNotationalTxt	cctree.vim	/^function! s:DisplayTree.mBuildNotationalTxt(depth, hiDepth, hiSym, hiPath) dict$/;"	f
DisplayTree.mBuildNotationalTxtMarkers	cctree.vim	/^function! s:DisplayTree.mBuildNotationalTxtMarkers(direction, markerSyms) dict$/;"	f
DisplayTree.mBuildTreeForLevel	cctree.vim	/^function! s:DisplayTree.mBuildTreeForLevel(ctree, level)$/;"	f
DisplayTree.mCreate	cctree.vim	/^function! s:DisplayTree.mCreate(calltree, direction, markers) dict$/;"	f
DisplayTree.mGetNotationalTxt	cctree.vim	/^function! s:DisplayTree.mGetNotationalTxt(depth, hiDepth, hiSym, hiPath) dict$/;"	f
DisplayTreeEntry.mCreate	cctree.vim	/^function! s:DisplayTreeEntry.mCreate(sym, level) dict$/;"	f
DisplayTreeUtils.mGetSymLevel	cctree.vim	/^function! s:DisplayTreeUtils.mGetSymLevel(DTEntry) dict$/;"	f
DisplayTreeUtils.mGetSymName	cctree.vim	/^function! s:DisplayTreeUtils.mGetSymName(DTEntry) dict$/;"	f
FindOpenBuffer	cctree.vim	/^func! s:FindOpenBuffer(filename)$/;"	f
FindOpenWindow	cctree.vim	/^func! s:FindOpenWindow(filename)$/;"	f
GenericDbLdr.mCreate	cctree.vim	/^function! s:GenericDbLdr.mCreate(fname) dict$/;"	f
GenericDbLdr.mParseDbHeader	cctree.vim	/^function! s:GenericDbLdr.mParseDbHeader(gRdr)$/;"	f
GenericDbSerializer.mCreate	cctree.vim	/^function! s:GenericDbSerializer.mCreate(xrefdb) dict$/;"	f
GenericDbSerializer.mWriteSymsToFile	cctree.vim	/^function! s:GenericDbSerializer.mWriteSymsToFile(dstVFile,$/;"	f
GenericDbSerializer.mWriteXRefDbToFile	cctree.vim	/^function! s:GenericDbSerializer.mWriteXRefDbToFile(fname,$/;"	f
GenericProgressBar.mCreate	cctree.vim	/^function! s:GenericProgressBar.mCreate(rangechars, depthchar, fmtStr)$/;"	f
GenericProgressBar.mDone	cctree.vim	/^function! s:GenericProgressBar.mDone()$/;"	f
GenericProgressBar.mSetDepth	cctree.vim	/^function! s:GenericProgressBar.mSetDepth(val) dict$/;"	f
GenericProgressBar.mUpdate	cctree.vim	/^function! s:GenericProgressBar.mUpdate() dict$/;"	f
GenericXRef.mCreate	cctree.vim	/^function! s:GenericXRef.mCreate(filedb) dict$/;"	f
GenericXRef.mInitState	cctree.vim	/^function! s:GenericXRef.mInitState() dict$/;"	f
GenericXRef.mRestoreState	cctree.vim	/^function! s:GenericXRef.mRestoreState() dict$/;"	f
HLNext	functions/function.vim	/^function! HLNext (blinktime) abort$/;"	f
LoadCscope	functions/cscopeHelp.vim	/^function! LoadCscope() abort$/;"	f
Pause	cctree.vim	/^function! Pause()$/;"	f
ProgressBarNumeric.mCreate	cctree.vim	/^function! s:ProgressBarNumeric.mCreate(maxcount, unit) dict$/;"	f
ProgressBarNumeric.mTick	cctree.vim	/^function! s:ProgressBarNumeric.mTick(count) dict$/;"	f
ProgressBarRoll.mCreate	cctree.vim	/^function! s:ProgressBarRoll.mCreate(rollchars, depthChar) dict$/;"	f
ProgressBarRoll.mTick	cctree.vim	/^function! s:ProgressBarRoll.mTick(count) dict$/;"	f
SSH_Session	remoteCommands.py	/^def SSH_Session():$/;"	f	access:public
SearchDefinition	functions/opengrok.vim	/^function! SearchDefinition(mode)$/;"	f
SearchString	functions/opengrok.vim	/^function! SearchString(mode)$/;"	f
SearchSymbol	functions/opengrok.vim	/^function! SearchSymbol(mode)$/;"	f
SetCPPProj	functions/cscopeHelp.vim	/^function! SetCPPProj()$/;"	f
ShellCmds.mExec	cctree.vim	/^function! s:ShellCmds.mExec(cmd)$/;"	f
ShellCmds.mJoin	cctree.vim	/^function! s:ShellCmds.mJoin(inFileList, outFile)$/;"	f
ShellCmds.mSplit	cctree.vim	/^function! s:ShellCmds.mSplit(inFile, outFile)$/;"	f
StatusLine.mInit	cctree.vim	/^function! s:StatusLine.mInit() dict$/;"	f
StatusLine.mRestore	cctree.vim	/^function! s:StatusLine.mRestore() dict$/;"	f
StatusLine.mSetExtraInfo	cctree.vim	/^function! s:StatusLine.mSetExtraInfo(msg) dict$/;"	f
StatusLine.mSetInfo	cctree.vim	/^function! s:StatusLine.mSetInfo(msg) dict$/;"	f
StopWatch.mCreate	cctree.vim	/^function! s:StopWatch.mCreate()        dict$/;"	f
StopWatch.mGetText	cctree.vim	/^function! s:StopWatch.mGetText()   dict$/;"	f
StopWatch.mReset	cctree.vim	/^function! s:StopWatch.mReset()        dict$/;"	f
StopWatch.mSnapElapsed	cctree.vim	/^function! s:StopWatch.mSnapElapsed()  dict$/;"	f
TranslateMap.mCreate	cctree.vim	/^function! s:TranslateMap.mCreate (srcsym, destsym, mapkind, regex) dict$/;"	f
TranslateMap.mTranslateAlpha	cctree.vim	/^function! s:TranslateMap.mTranslateAlpha(value) dict$/;"	f
TranslateMap.mTranslateNumeric	cctree.vim	/^function! s:TranslateMap.mTranslateNumeric(value) dict$/;"	f
UniqList.mFilterEntries	cctree.vim	/^function! s:UniqList.mFilterEntries(lstval) dict$/;"	f
Utils.mGetSearchFlag	cctree.vim	/^function! s:Utils.mGetSearchFlag(gvalue)$/;"	f
Utils.mStrlenEx	cctree.vim	/^function! s:Utils.mStrlenEx(val)$/;"	f
WinMove	functions/function.vim	/^function! WinMove(key) abort$/;"	f
XRefDiskDb.mClear	cctree.vim	/^function! s:XRefDiskDb.mClear() dict$/;"	f
XRefDiskDb.mCreate	cctree.vim	/^function! s:XRefDiskDb.mCreate() dict$/;"	f
XRefDiskDb.mDecodeTagEntry	cctree.vim	/^function! s:XRefDiskDb.mDecodeTagEntry(tagentry) dict$/;"	f
XRefDiskDb.mGetSymbolFromId	cctree.vim	/^function! s:XRefDiskDb.mGetSymbolFromId(symid) dict$/;"	f
XRefDiskDb.mGetSymbolIdFromName	cctree.vim	/^function! s:XRefDiskDb.mGetSymbolIdFromName(symname) dict$/;"	f
XRefDiskDb.mGetSymbolIds	cctree.vim	/^function! s:XRefDiskDb.mGetSymbolIds() dict$/;"	f
XRefDiskDb.mGetSymbolNames	cctree.vim	/^function! s:XRefDiskDb.mGetSymbolNames(lead) dict$/;"	f
XRefDiskDb.mInitState	cctree.vim	/^function! s:XRefDiskDb.mInitState() dict$/;"	f
XRefDiskDb.mRestoreState	cctree.vim	/^function! s:XRefDiskDb.mRestoreState() dict$/;"	f
XRefDiskDb.mSetLink	cctree.vim	/^function! s:XRefDiskDb.mSetLink(filedb) dict$/;"	f
XRefDiskDbLdr.mCreate	cctree.vim	/^function! s:XRefDiskDbLdr.mCreate(fname) dict$/;"	f
XRefDiskDbLdr.mLoadFileIntoXRefDb	cctree.vim	/^function! s:XRefDiskDbLdr.mLoadFileIntoXRefDb(xRefDb, gRdr) dict$/;"	f
XRefMemDbLdr.mCreate	cctree.vim	/^function! s:XRefMemDbLdr.mCreate(fname) dict$/;"	f
XRefMemDbLdr.mLoadFileIntoXRefDb	cctree.vim	/^function! s:XRefMemDbLdr.mLoadFileIntoXRefDb(xRefDb, gRdr)  dict$/;"	f
XRefMemDbLdr.mLoadFileIntoXRefDb	cctree.vim	/^function! s:XRefMemDbLdr.mLoadFileIntoXRefDb(xRefDb, gRdr) dict$/;"	f
XRefMemDbLdr.mProcessListIntoXrefDb	cctree.vim	/^function! s:XRefMemDbLdr.mProcessListIntoXrefDb(symbols, rdr, xrefdb, pbar)$/;"	f
XRefMemDbLdr.mReadFileIntoXRefDb	cctree.vim	/^function! s:XRefMemDbLdr.mReadFileIntoXRefDb(vDbFile, xrefdb, gRdr)$/;"	f
XRefTracer.mBuildForSymbol	cctree.vim	/^function! s:XRefTracer.mBuildForSymbol(symid, curdepth, maxdepth,$/;"	f
XRefTracer.mBuildTree	cctree.vim	/^function! s:XRefTracer.mBuildTree(rtree, curdepth, maxdepth,$/;"	f
XRefTracer.mCreate	cctree.vim	/^function! s:XRefTracer.mCreate(xrefdb) dict$/;"	f
XRefTracer.mDoneTracing	cctree.vim	/^function! s:XRefTracer.mDoneTracing() dict$/;"	f
XRefTracer.mGetSymbolIdXRef	cctree.vim	/^function! s:XRefTracer.mGetSymbolIdXRef(symid, direction) dict$/;"	f
XRefTracer.mGrowTree	cctree.vim	/^function! s:XRefTracer.mGrowTree(rtree, $/;"	f
XRefTracer.mInitTracing	cctree.vim	/^function! s:XRefTracer.mInitTracing() dict$/;"	f
XRefTracer.mPruneTree	cctree.vim	/^function! s:XRefTracer.mPruneTree(rtree, $/;"	f
argparse	cvh	/^import argparse$/;"	i
args	cvh	/^    args = parser.parse_args()$/;"	v
callcmd	cvh	/^def callcmd(cmd = ''):$/;"	f	access:public
cmd	cvh	/^        cmd = 'bash ~\/.dotfile\/gen_cscope.sh '+args.snapname$/;"	v
cmd	cvh	/^        cmd = 'cd ' + args.home + '\/browse'$/;"	v
cmd	cvh	/^        cmd = 'cscope -d -f ' + args.home + '\/browse\/cscope.out'$/;"	v
cmd	cvh	/^        cmd = 'ln -s ' + args.home + '\/browse\/'+args.snapname+'\/cscope.in.out ' + args.home + '\/browse\/cscope.in.out'$/;"	v
cmd	cvh	/^        cmd = 'ln -s ' + args.home + '\/browse\/'+args.snapname+'\/cscope.out ' + args.home + '\/browse\/cscope.out'$/;"	v
cmd	cvh	/^        cmd = 'ln -s ' + args.home + '\/browse\/'+args.snapname+'\/cscope.po.out ' + args.home + '\/browse\/cscope.po.out'$/;"	v
cmd	cvh	/^        cmd = 'ln -s ' + args.home + '\/browse\/'+args.snapname+'\/tags ' + args.home + '\/browse\/tags'$/;"	v
cmd	cvh	/^        cmd = 'rm -f ' + args.home + '\/browse\/cscope*'$/;"	v
cmd	cvh	/^        cmd = 'rm -f ' + args.home + '\/browse\/tag*'$/;"	v
colors_name	appearance/autumnleaf.vim	/^let colors_name="AutumnLeaf"$/;"	v
colors_name	appearance/pyte.vim	/^let colors_name = "pyte"$/;"	v
compile	remoteCommands.py	/^def compile(path):$/;"	f	access:public
create_path	remoteCommands.py	/^def create_path(s, revIndex = 0):$/;"	f	access:public
downloaddiff	remoteCommands.py	/^def downloaddiff(fileParentPath, fileName, rev = ''):$/;"	f	access:public
g:CCTreeGlobals	cctree.vim	/^let g:CCTreeGlobals = s:CCTreeGlobals$/;"	v
g:CCTreeKeyCompressTree	cctree.vim	/^    let g:CCTreeKeyCompressTree = 'zs'     " Compress call-tree$/;"	v
g:CCTreeKeyDepthMinus	cctree.vim	/^    let g:CCTreeKeyDepthMinus = '<C-\\>-'$/;"	v
g:CCTreeKeyDepthPlus	cctree.vim	/^    let g:CCTreeKeyDepthPlus = '<C-\\>='$/;"	v
g:CCTreeKeyHilightTree	cctree.vim	/^    let g:CCTreeKeyHilightTree = '<C-l>'        " Static highlighting$/;"	v
g:CCTreeKeySaveWindow	cctree.vim	/^    let g:CCTreeKeySaveWindow = '<C-\\>y'$/;"	v
g:CCTreeKeyToggleWindow	cctree.vim	/^    let g:CCTreeKeyToggleWindow = '<C-\\>w'$/;"	v
g:CCTreeKeyTraceForwardTree	cctree.vim	/^    let g:CCTreeKeyTraceForwardTree = '<C-\\>>'$/;"	v
g:CCTreeKeyTraceReverseTree	cctree.vim	/^    let g:CCTreeKeyTraceReverseTree = '<C-\\><'$/;"	v
g:NERDTreeDirArrowCollapsible	plugins/plugin.vim	/^let g:NERDTreeDirArrowCollapsible = '-'$/;"	v
g:NERDTreeDirArrowExpandable	plugins/plugin.vim	/^let g:NERDTreeDirArrowExpandable = '+'$/;"	v
g:OmniCpp_DisplayMode	plugins/plugin.vim	/^let g:OmniCpp_DisplayMode = 1$/;"	v
g:OmniCpp_GlobalScopeSearch	plugins/plugin.vim	/^let g:OmniCpp_GlobalScopeSearch = 1$/;"	v
g:OmniCpp_MayCompleteArrow	plugins/plugin.vim	/^let g:OmniCpp_MayCompleteArrow = 1 " autocomplete after ->$/;"	v
g:OmniCpp_MayCompleteDot	plugins/plugin.vim	/^let g:OmniCpp_MayCompleteDot = 1 " autocomplete after .$/;"	v
g:OmniCpp_MayCompleteScope	plugins/plugin.vim	/^let g:OmniCpp_MayCompleteScope = 1 " autocomplete after ::$/;"	v
g:OmniCpp_NamespaceSearch	plugins/plugin.vim	/^let g:OmniCpp_NamespaceSearch = 1$/;"	v
g:OmniCpp_ShowAccess	plugins/plugin.vim	/^let g:OmniCpp_ShowAccess = 1$/;"	v
g:OmniCpp_ShowPrototypeInAbbr	plugins/plugin.vim	/^let g:OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters$/;"	v
g:VimuxUseNearest	plugins/plugin.vim	/^let g:VimuxUseNearest = 0	" Don't use the nearest panel, create a new one$/;"	v
g:airline#extensions#tabline#enabled	plugins/plugin.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#left_alt_sep	plugins/plugin.vim	/^let g:airline#extensions#tabline#left_alt_sep = '|'$/;"	v
g:airline#extensions#tabline#left_sep	plugins/plugin.vim	/^let g:airline#extensions#tabline#left_sep = ' '$/;"	v
g:airline_section_error	plugins/plugin.vim	/^let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])$/;"	v
g:colors_name	appearance/dracula.vim	/^let g:colors_name = 'dracula'$/;"	v
g:cpp_class_decl_highlight	plugins/plugin.vim	/^let g:cpp_class_decl_highlight = 1$/;"	v
g:cpp_class_scope_highlight	plugins/plugin.vim	/^let g:cpp_class_scope_highlight = 1$/;"	v
g:cpp_concepts_highlight	plugins/plugin.vim	/^let g:cpp_concepts_highlight = 1$/;"	v
g:cpp_experimental_simple_template_highlight	plugins/plugin.vim	/^let g:cpp_experimental_simple_template_highlight = 1$/;"	v
g:cpp_member_variable_highlight	plugins/plugin.vim	/^let g:cpp_member_variable_highlight = 1$/;"	v
g:dracula_bold	appearance/dracula.vim	/^  let g:dracula_bold = 1$/;"	v
g:dracula_colorterm	appearance/dracula.vim	/^  let g:dracula_colorterm = 1$/;"	v
g:dracula_inverse	appearance/dracula.vim	/^  let g:dracula_inverse = 1$/;"	v
g:dracula_italic	appearance/dracula.vim	/^  let g:dracula_italic = 1$/;"	v
g:dracula_palette	appearance/dracula.vim	/^let g:dracula_palette = {$/;"	v
g:dracula_undercurl	appearance/dracula.vim	/^  let g:dracula_undercurl = 1$/;"	v
g:dracula_underline	appearance/dracula.vim	/^  let g:dracula_underline = 1$/;"	v
g:opengrok_project	functions/opengrok.vim	/^let g:opengrok_project = "main.perforce.1666"$/;"	v
g:terminal_color_0	appearance/dracula.vim	/^  let g:terminal_color_0  = '#44475A'$/;"	v
g:terminal_color_1	appearance/dracula.vim	/^  let g:terminal_color_1  = '#DE312B'$/;"	v
g:terminal_color_10	appearance/dracula.vim	/^  let g:terminal_color_10 = '#50FA7B'$/;"	v
g:terminal_color_11	appearance/dracula.vim	/^  let g:terminal_color_11 = '#F1FA8C'$/;"	v
g:terminal_color_12	appearance/dracula.vim	/^  let g:terminal_color_12 = '#BD93F9'$/;"	v
g:terminal_color_13	appearance/dracula.vim	/^  let g:terminal_color_13 = '#FF79C6'$/;"	v
g:terminal_color_14	appearance/dracula.vim	/^  let g:terminal_color_14 = '#8BE9FD'$/;"	v
g:terminal_color_15	appearance/dracula.vim	/^  let g:terminal_color_15 = '#F8F8F2'$/;"	v
g:terminal_color_2	appearance/dracula.vim	/^  let g:terminal_color_2  = '#2FD651'$/;"	v
g:terminal_color_3	appearance/dracula.vim	/^  let g:terminal_color_3  = '#D0D662'$/;"	v
g:terminal_color_4	appearance/dracula.vim	/^  let g:terminal_color_4  = '#9C6FCF'$/;"	v
g:terminal_color_5	appearance/dracula.vim	/^  let g:terminal_color_5  = '#DE559C'$/;"	v
g:terminal_color_6	appearance/dracula.vim	/^  let g:terminal_color_6  = '#6AC5D3'$/;"	v
g:terminal_color_7	appearance/dracula.vim	/^  let g:terminal_color_7  = '#D7D4C8'$/;"	v
g:terminal_color_8	appearance/dracula.vim	/^  let g:terminal_color_8  = '#656B84'$/;"	v
g:terminal_color_9	appearance/dracula.vim	/^  let g:terminal_color_9  = '#FF5555'$/;"	v
get_complete_url	functions/opengrok.vim	/^function! s:get_complete_url(searchtype, keyword)$/;"	f
get_file_name	remoteCommands.py	/^def get_file_name(s):$/;"	f	access:public
get_string_to_search	functions/opengrok.vim	/^function! s:get_string_to_search(mode)$/;"	f
get_visual_selection	functions/opengrok.vim	/^function! s:get_visual_selection()$/;"	f
h	appearance/dracula.vim	/^function! s:h(scope, fg, ...) " bg, attr_list, special$/;"	f
hostname	remoteCommands.py	/^hostname = "uslinux01.commvault.com"$/;"	v
loaded_cctree	cctree.vim	/^  let loaded_cctree = 1$/;"	v
nbytes	remoteCommands.py	/^nbytes = 4096$/;"	v
nodeName	remoteCommands.py	/^nodeName = ''$/;"	v
os	cvh	/^import os$/;"	i
os	remoteCommands.py	/^import os$/;"	i
paramiko	remoteCommands.py	/^import paramiko$/;"	i
parser	cvh	/^    parser = argparse.ArgumentParser()$/;"	v
password	remoteCommands.py	/^password = "gbuilder"$/;"	v
path	remoteCommands.py	/^            path = create_path(s, retries)$/;"	v
port	remoteCommands.py	/^port = 22$/;"	v
rebuild_parser	cvh	/^    rebuild_parser = subparsers.add_parser('rebuild', help='Rebuild the snap symbol db')$/;"	v
ret	remoteCommands.py	/^            ret = compile(path)$/;"	v
ret	remoteCommands.py	/^        ret = 0$/;"	v
ret	remoteCommands.py	/^        ret = downloaddiff(create_path(sys.argv[2]), get_file_name(sys.argv[2]), rev)$/;"	v
retries	remoteCommands.py	/^            retries = retries + 1;$/;"	v
retries	remoteCommands.py	/^        retries = 0$/;"	v
rev	remoteCommands.py	/^            rev = sys.argv[3]$/;"	v
rev	remoteCommands.py	/^        rev = ''$/;"	v
s	remoteCommands.py	/^    s = sys.argv[2]$/;"	v
s:CCTreeCmdLine	cctree.vim	/^let s:CCTreeCmdLine = {}$/;"	v
s:CCTreeDBList	cctree.vim	/^let s:CCTreeDBList = {$/;"	v
s:CCTreeDisplay	cctree.vim	/^let s:CCTreeDisplay = {}$/;"	v
s:CCTreeGlobals	cctree.vim	/^let s:CCTreeGlobals = {$/;"	v
s:CCTreeKeyMappings	cctree.vim	/^let s:CCTreeKeyMappings = {$/;"	v
s:CCTreeKeywordRegEx	cctree.vim	/^let s:CCTreeKeywordRegEx = '[A-Za-z0-9_\\\\\\.\\\/]\\+'$/;"	v
s:CCTreeMarkers	cctree.vim	/^let s:CCTreeMarkers = {$/;"	v
s:CCTreeOptions	cctree.vim	/^let s:CCTreeOptions = {'UseUnicodeSymbols': function('s:CCTreeSetUseUtf8Symbols'),$/;"	v
s:CCTreePreviewState	cctree.vim	/^let s:CCTreePreviewState = {$/;"	v
s:CCTreeRC	cctree.vim	/^let s:CCTreeRC = {$/;"	v
s:CCTreeSym	cctree.vim	/^let s:CCTreeSym = {$/;"	v
s:CCTreeTagDbRdr	cctree.vim	/^let s:CCTreeTagDbRdr = {'class': 'CCTreeXrefDb',$/;"	v
s:CCTreeTagDbWriter	cctree.vim	/^let s:CCTreeTagDbWriter = {}$/;"	v
s:CCTreeUI	cctree.vim	/^let s:CCTreeUI = {}$/;"	v
s:CCTreeUniqListFilter	cctree.vim	/^let s:CCTreeUniqListFilter = deepcopy(s:UniqList)$/;"	v
s:CCTreeUseConceal	cctree.vim	/^    let s:CCTreeUseConceal = 0$/;"	v
s:CCTreeUseConceal	cctree.vim	/^    let s:CCTreeUseConceal = 1$/;"	v
s:CCTreeUtils	cctree.vim	/^let s:CCTreeUtils = {}$/;"	v
s:CCTreeWindow	cctree.vim	/^let s:CCTreeWindow =  {$/;"	v
s:CCTreeXrefDbEntry	cctree.vim	/^let s:CCTreeXrefDbEntry = {$/;"	v
s:CallTreeNode	cctree.vim	/^let s:CallTreeNode = {$/;"	v
s:CallTreeUtils	cctree.vim	/^let s:CallTreeUtils = {}$/;"	v
s:CharMaps	cctree.vim	/^let s:CharMaps = {$/;"	v
s:CscopeDbRdr	cctree.vim	/^let s:CscopeDbRdr = {$/;"	v
s:CscopeDbRdrState	cctree.vim	/^let s:CscopeDbRdrState = {$/;"	v
s:CscopeDbRdrSymTags	cctree.vim	/^let s:CscopeDbRdrSymTags = {$/;"	v
s:CscopeDbSymEnhFilter	cctree.vim	/^let s:CscopeDbSymEnhFilter = ['v:val =~ "^\\t[emgt#`$}@~)]"',$/;"	v
s:CscopeDbSymEnhFilterPerl	cctree.vim	/^let s:CscopeDbSymEnhFilterPerl = ['^\\t[\\`\\#\\$\\}\\@\\~\\)emgt]',$/;"	v
s:CscopeDbSymFilter	cctree.vim	/^let s:CscopeDbSymFilter = ['v:val =~ "^\\t[#`$}@\\~\\)]"']$/;"	v
s:CscopeDbSymFilterPerl	cctree.vim	/^let s:CscopeDbSymFilterPerl = ['^\\t[\\`\\#\\$\\}\\@\\~\\)]']$/;"	v
s:DBClasses	cctree.vim	/^let s:DBClasses = { 'cscopeid': 'Cscope', 'cctreexref' : 'CCTree XRef'}$/;"	v
s:DBStorage	cctree.vim	/^let s:DBStorage = { 'memory': 'Memory', 'disk' : 'Disk'}$/;"	v
s:DisplayTree	cctree.vim	/^let s:DisplayTree = {$/;"	v
s:DisplayTreeEntry	cctree.vim	/^let s:DisplayTreeEntry = {$/;"	v
s:DisplayTreeUtils	cctree.vim	/^let s:DisplayTreeUtils =  {}$/;"	v
s:GenericDbLdr	cctree.vim	/^let s:GenericDbLdr = {$/;"	v
s:GenericDbSerializer	cctree.vim	/^let s:GenericDbSerializer = {}$/;"	v
s:GenericProgressBar	cctree.vim	/^let s:GenericProgressBar= {$/;"	v
s:GenericXRef	cctree.vim	/^let s:GenericXRef = {}$/;"	v
s:ProgressBarNumeric	cctree.vim	/^let s:ProgressBarNumeric = {$/;"	v
s:ProgressBarRoll	cctree.vim	/^let s:ProgressBarRoll = {$/;"	v
s:ShellCmds	cctree.vim	/^let s:ShellCmds = {'shellOutput': ''}$/;"	v
s:StatusLine	cctree.vim	/^let s:StatusLine = {$/;"	v
s:StopWatch	cctree.vim	/^let s:StopWatch = {$/;"	v
s:TranslateMap	cctree.vim	/^let s:TranslateMap = {}$/;"	v
s:TreeMarkers_Text	cctree.vim	/^let s:TreeMarkers_Text = {$/;"	v
s:TreeMarkers_UTF8	cctree.vim	/^let s:TreeMarkers_UTF8 = {$/;"	v
s:UniqList	cctree.vim	/^let s:UniqList = {}$/;"	v
s:Utils	cctree.vim	/^let s:Utils = {}$/;"	v
s:XRefDiskDb	cctree.vim	/^let s:XRefDiskDb = {$/;"	v
s:XRefDiskDbLdr	cctree.vim	/^let s:XRefDiskDbLdr = {$/;"	v
s:XRefMemDbLdr	cctree.vim	/^let s:XRefMemDbLdr = {$/;"	v
s:XRefTracer	cctree.vim	/^let s:XRefTracer = {$/;"	v
s:attrs	appearance/dracula.vim	/^let s:attrs = {$/;"	v
s:bg	appearance/dracula.vim	/^let s:bg        = ['#282A36', 236]$/;"	v
s:bgdark	appearance/dracula.vim	/^let s:bgdark    = ['#21222C', 235]$/;"	v
s:bgdarker	appearance/dracula.vim	/^let s:bgdarker  = ['#191A21', 234]$/;"	v
s:bglight	appearance/dracula.vim	/^let s:bglight   = ['#343746', 237]$/;"	v
s:bglighter	appearance/dracula.vim	/^let s:bglighter = ['#424450', 238]$/;"	v
s:calltreemaxdepth	cctree.vim	/^let s:calltreemaxdepth = 10$/;"	v
s:comment	appearance/dracula.vim	/^let s:comment   = ['#6272A4',  61]$/;"	v
s:cpo_save	cctree.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cyan	appearance/dracula.vim	/^let s:cyan      = ['#8BE9FD', 117]$/;"	v
s:fg	appearance/dracula.vim	/^let s:fg        = ['#F8F8F2', 255]$/;"	v
s:green	appearance/dracula.vim	/^let s:green     = ['#50FA7B',  84]$/;"	v
s:none	appearance/dracula.vim	/^let s:none      = ['NONE', 'NONE']$/;"	v
s:orange	appearance/dracula.vim	/^let s:orange    = ['#FFB86C', 215]$/;"	v
s:pink	appearance/dracula.vim	/^let s:pink      = ['#FF79C6', 212]$/;"	v
s:pluginname	cctree.vim	/^let s:pluginname = 'CCTree'$/;"	v
s:purple	appearance/dracula.vim	/^let s:purple    = ['#BD93F9', 141]$/;"	v
s:red	appearance/dracula.vim	/^let s:red       = ['#FF5555', 203]$/;"	v
s:selection	appearance/dracula.vim	/^let s:selection = ['#44475A', 239]$/;"	v
s:sid	cctree.vim	/^let s:sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$', '\\1', '')$/;"	v
s:subtle	appearance/dracula.vim	/^let s:subtle    = ['#424450', 238]$/;"	v
s:tag_debug	cctree.vim	/^let s:tag_debug=0$/;"	v
s:vFile	cctree.vim	/^let s:vFile = {}$/;"	v
s:vFileR	cctree.vim	/^let s:vFileR = {$/;"	v
s:vFileW	cctree.vim	/^let s:vFileW = {$/;"	v
s:windowsavetitle	cctree.vim	/^let s:windowsavetitle = 'CCTree-View-Copy'$/;"	v
s:windowtitle	cctree.vim	/^let s:windowtitle = 'CCTree-View'$/;"	v
s:xRefMemDb	cctree.vim	/^let s:xRefMemDb = {$/;"	v
s:yellow	appearance/dracula.vim	/^let s:yellow    = ['#F1FA8C', 228]$/;"	v
search_parser	cvh	/^    search_parser = subparsers.add_parser('search', help='Start a cscope on a snap.')$/;"	v
subparsers	cvh	/^    subparsers = parser.add_subparsers(dest='option_name')$/;"	v
subprocess	cvh	/^import subprocess$/;"	i
sys	cvh	/^import sys$/;"	i
sys	remoteCommands.py	/^import sys$/;"	i
url_open	functions/opengrok.vim	/^function! s:url_open(url)$/;"	f
username	remoteCommands.py	/^username = "gbuilder"$/;"	v
vFile.mCreate	cctree.vim	/^function! s:vFile.mCreate(fname, mode)$/;"	f
vFileR.mClose	cctree.vim	/^function! s:vFileR.mClose()  dict$/;"	f
vFileR.mCreate	cctree.vim	/^function! s:vFileR.mCreate(fname)  dict$/;"	f
vFileR.mIsLargeFile	cctree.vim	/^function! s:vFileR.mIsLargeFile()  dict$/;"	f
vFileR.mOpen	cctree.vim	/^function! s:vFileR.mOpen()  dict$/;"	f
vFileR.mRead	cctree.vim	/^function! s:vFileR.mRead()  dict$/;"	f
vFileR.mRewind	cctree.vim	/^function! s:vFileR.mRewind()  dict$/;"	f
vFileW.mAddFileSize	cctree.vim	/^function! s:vFileW.mAddFileSize(size)  dict$/;"	f
vFileW.mClose	cctree.vim	/^function! s:vFileW.mClose()  dict$/;"	f
vFileW.mCreate	cctree.vim	/^function! s:vFileW.mCreate(fname)  dict$/;"	f
vFileW.mCreateSplit	cctree.vim	/^function! s:vFileW.mCreateSplit()  dict$/;"	f
vFileW.mTestForSplit	cctree.vim	/^function! s:vFileW.mTestForSplit()  dict$/;"	f
vFileW.mWriteLine	cctree.vim	/^function! s:vFileW.mWriteLine(line)  dict$/;"	f
vFileW.mWriteList	cctree.vim	/^function! s:vFileW.mWriteList(linelist)  dict$/;"	f
vimtmp	filemanagement/filemanagement.vim	/^let vimtmp = $HOME . '\/.tmp\/' . getpid()$/;"	v
xRefMemDb.mAddSym	cctree.vim	/^function! s:xRefMemDb.mAddSym(name, kind)    dict$/;"	f
xRefMemDb.mCleanSymbols	cctree.vim	/^function! s:xRefMemDb.mCleanSymbols () dict$/;"	f
xRefMemDb.mClear	cctree.vim	/^function s:xRefMemDb.mClear()   dict$/;"	f
xRefMemDb.mCreate	cctree.vim	/^function s:xRefMemDb.mCreate()   dict$/;"	f
xRefMemDb.mGetSymbolCount	cctree.vim	/^function! s:xRefMemDb.mGetSymbolCount() dict$/;"	f
xRefMemDb.mGetSymbolFromId	cctree.vim	/^function! s:xRefMemDb.mGetSymbolFromId(symid) dict$/;"	f
xRefMemDb.mGetSymbolFromName	cctree.vim	/^function! s:xRefMemDb.mGetSymbolFromName(symname) dict$/;"	f
xRefMemDb.mGetSymbolIdFromName	cctree.vim	/^function! s:xRefMemDb.mGetSymbolIdFromName(symname) dict$/;"	f
xRefMemDb.mGetSymbolIds	cctree.vim	/^function! s:xRefMemDb.mGetSymbolIds() dict$/;"	f
xRefMemDb.mGetSymbolNames	cctree.vim	/^function! s:xRefMemDb.mGetSymbolNames(lead) dict$/;"	f
xRefMemDb.mInitState	cctree.vim	/^function s:xRefMemDb.mInitState()   dict$/;"	f
xRefMemDb.mInsertSym	cctree.vim	/^function! s:xRefMemDb.mInsertSym(idx, cctreesym)  dict$/;"	f
xRefMemDb.mMarkXRefSyms	cctree.vim	/^function! s:xRefMemDb.mMarkXRefSyms(funcentryidx, newfuncidx) dict$/;"	f
xRefMemDb.mRemoveSymById	cctree.vim	/^function! s:xRefMemDb.mRemoveSymById(symidx)  dict$/;"	f
xRefMemDb.mRemoveSymByName	cctree.vim	/^function! s:xRefMemDb.mRemoveSymByName(symname)  dict$/;"	f
xRefMemDb.mRestoreState	cctree.vim	/^function s:xRefMemDb.mRestoreState()   dict$/;"	f
xRefMemDb.mTranslateSymbols	cctree.vim	/^function! s:xRefMemDb.mTranslateSymbols(map, tkeys) dict$/;"	f
